name: ios-release-build
run-name: ${{ github.actor }} is publishing a ${{ inputs.release_type }} build ${{ inputs.version_name_override }}

#TODO: secrets extraction here (but requires Xcode build first)
# https://www.andrewhoog.com/post/how-to-build-an-ios-app-with-github-actions-2023/

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: "beta or production?"
        options:
          - beta
          - production
        default: prerelease
      version_name_override:
        description: "Version Name Override (Only specify this if you need a name outside of our typical naming convention)"
        required: false

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v3
        with:
          author_name: github.actor
          author_email: github

      - name: "Determine version_name"
        run: |
          version_name="${{inputs.version_name_override}}"
          if [[ -z "$version_name" ]]
          then
            echo "Good. No override was specified. Finding version"
            if [[ ${{inputs.release_type}} == "production" ]]
            then
              echo "using manifest.version"
              version_name=$(cat manifest.json | jq '.version')
            else
              previous_release_body='{"query":"{repository(owner: \"'
              previous_release_body+="${GITHUB_REPOSITORY_OWNER}"
              previous_release_body+='\", name: \"AboveVTT\"){releases(first:1,orderBy:{field:CREATED_AT,direction:DESC}){edges{node{name publishedAt}}}}}"}'
              previous_release_response=$(curl --request POST \
                --url https://api.github.com/graphql \
                --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
                --header 'Content-Type: application/json' \
                --data "$previous_release_body")
              previous_version=$(echo $previous_release_response | jq '.data.repository.releases.edges[0].node.name' | xargs echo)
              previous_release_timestamp=$(echo $previous_release_response | jq '.data.repository.releases.edges[0].node.publishedAt' | xargs echo)
              echo "previous_release_timestamp: ${previous_release_timestamp}"
              echo "previous_release_timestamp=${previous_release_timestamp}" >> $GITHUB_ENV
          
              version_name=''
              echo "previous_version: $previous_version"
              if [[ "${previous_version}" == *"-beta"* ]]
              then
                echo "incrementing previous_version"
                [[ "${previous_version}" =~ (.*[^0-9])([0-9]+)$ ]] && version_name="${BASH_REMATCH[1]}$((BASH_REMATCH[2] + 1))";
              else
                version_name=$(cat manifest.json | jq '.version' | xargs echo)
                version_name+="-beta1"
p              fi
              echo "version_name: $version_name"
            fi
          fi
          if [[ -z "$version_name" ]]
          then
            echo "Failed to determine version_name"
            exit 1
          fi
          echo "version_name: ${version_name}"
          echo "version_name=${version_name}" >> $GITHUB_ENV
          
      - name: "Build environment.js"
        run: |
          version_suffix=''
          if [[ "${{inputs.release_type}}" == "beta" ]]; then
            version_suffix=${{env.version_name}}
            version_suffix=-${version_suffix#*-}
          fi
          AVTT_ENVIRONMENT=$(jq --null-input \
            --arg version_suffix "$version_suffix" \
            '{"versionSuffix": $version_suffix, "baseUrl": "https://services.abovevtt.net"}'
          )
          echo "about to cat environment.js" 
          cat environment.js
          echo "did cat environment.js" 
          echo "let AVTT_ENVIRONMENT = ${AVTT_ENVIRONMENT};" > environment.js
          echo "about to cat environment.js" 
          cat environment.js
          echo "did cat environment.js"
          git config user.email "bot@github.com"
          git config user.name "workflow bot"
          git add environment.js
          git commit -m "update environment.js" environment.js

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

      # todo: eval -configuration Debug below...
      - name: build archive
        run: |
          xcodebuild -scheme "AboveVTT" \
          -archivePath $RUNNER_TEMP/abovevtt.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          clean archive          

      - name: export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/abovevtt.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build          
      #todo: decide about all notes/issues/discord stuff
      #todo: figure out if we can go right to TestFlight
      - name: Upload application
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ runner.temp }}/build/AboveVTT.ipa
          # you can also archive the entire directory 
          # path: ${{ runner.temp }}/build
          retention-days: 3
